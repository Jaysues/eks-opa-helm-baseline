apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: eksnetworkpolicyexists
  annotations:
    description: "Ensures namespaces have a NetworkPolicy defined (CIS EKS 4.3.2, 5.4.4)"
    version: "1.0.0"
spec:
  crd:
    spec:
      names:
        kind: EksNetworkPolicyExists
      validation:
        openAPIV3Schema:
          properties:
            excludedNamespaces:
              type: array
              items:
                type: string
            labelSelector:
              type: object
              properties:
                matchLabels:
                  type: object
                  additionalProperties:
                    type: string
                matchExpressions:
                  type: array
                  items:
                    type: object
                    properties:
                      key:
                        type: string
                      operator:
                        type: string
                        enum: ["In", "NotIn", "Exists", "DoesNotExist"]
                      values:
                        type: array
                        items:
                          type: string
            exemptWithAnnotation:
              type: string
            exemptWithLabel:
              type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package eksnetworkpolicyexists

        violation[{"msg": msg, "details": {}}] {
          not excluded_namespace
          not has_service_mesh_annotation
          not has_service_mesh_label
          not single_pod_namespace
          not has_network_policy
          
          msg := sprintf("Namespace '%v' does not have a NetworkPolicy defined", [input.review.object.metadata.name])
        }

        excluded_namespace {
          input.review.object.metadata.namespace == input.parameters.excludedNamespaces[_]
        }

        has_service_mesh_annotation {
          annotation_name := input.parameters.exemptWithAnnotation
          input.review.object.metadata.annotations[annotation_name]
        }

        has_service_mesh_label {
          label_name := input.parameters.exemptWithLabel
          input.review.object.metadata.labels[label_name]
        }

        single_pod_namespace {
          count(data.inventory.namespace[input.review.object.metadata.namespace].Pod) == 1
        }

        has_network_policy {
          count(data.inventory.namespace[input.review.object.metadata.namespace].NetworkPolicy) > 0
        } 
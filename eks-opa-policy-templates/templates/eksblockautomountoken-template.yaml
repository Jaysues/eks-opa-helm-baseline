apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: eksblockautomounttoken
spec:
  crd:
    spec:
      names:
        kind: EksBlockAutomountToken
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          properties:
            excludedImages:
              type: array
              items:
                type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package eksblockautomounttoken

        import data.lib.exclude_container_image.is_excluded

        violation[{"msg": msg}] {
          c := input_containers[_]
          not is_excluded(c)
          obj := input.review.object
          mountServiceAccountToken(obj.spec)
          msg := sprintf("Automounting service account token is disallowed, pod: %v", [obj.metadata.name])
        }

        mountServiceAccountToken(spec) {
          spec.automountServiceAccountToken == true
        }

        mountServiceAccountToken(spec) {
          not has_key(spec, "automountServiceAccountToken")
          "/var/run/secrets/kubernetes.io/serviceaccount" == input_containers[_].volumeMounts[_].mountPath
        }

        input_containers[c] {
          c := input.review.object.spec.containers[_]
        }

        input_containers[c] {
          c := input.review.object.spec.initContainers[_]
        }

        input_containers[c] {
            c := input.review.object.spec.ephemeralContainers[_]
        }

        has_key(x, k) {
          _ = x[k]
        }
      libs:
        - |
          package lib.exclude_container_image
          is_excluded(container) {
              exclude_images := object.get(object.get(input, "parameters", {}), "excludedImages", [])
              img := container.image
              exclusion := exclude_images[_]
              _matches_exclusion(img, exclusion)
          }
          _matches_exclusion(img, exclusion) {
              not endswith(exclusion, "*")
              exclusion == img
          }
          _matches_exclusion(img, exclusion) {
              endswith(exclusion, "*")
              prefix := trim_suffix(exclusion, "*")
              startswith(img, prefix)
          }  

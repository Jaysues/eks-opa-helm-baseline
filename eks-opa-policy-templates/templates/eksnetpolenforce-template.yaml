apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: eksnetpolenforce
  annotations:
    description: "Enforces network policies for pod communication"
spec:
  crd:
    spec:
      names:
        kind: EksNetPolEnforce
      validation:
        openAPIV3Schema:
          properties:
            requireDefaultDeny:
              type: boolean
            requireIngressRules:
              type: boolean
            requireEgressRules:
              type: boolean
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package eksnetpolenforce

        violation[{"msg": msg, "details": details}] {
          input.review.object.kind == "Pod"
          namespace := input.review.object.metadata.namespace
          not has_netpol(namespace)
          msg := sprintf("Namespace '%v' does not have a NetworkPolicy", [namespace])
          details := {
            "namespace": namespace,
            "pod_name": input.review.object.metadata.name,
            "cis_benchmark": "4.3.2, 5.4.4",
            "finding_type": "CIS_BENCHMARK_VIOLATION"
          }
        }

        has_netpol(namespace) {
          policies := data.inventory.namespace[namespace]["networking.k8s.io/v1"]["NetworkPolicy"]
          count(policies) > 0
        }

        violation[{"msg": msg}] {
          input.review.object.kind == "NetworkPolicy"
          input.parameters.requireDefaultDeny
          not has_default_deny(input.review.object)
          msg := "NetworkPolicy must include default deny rule"
        }

        violation[{"msg": msg}] {
          input.review.object.kind == "NetworkPolicy"
          input.parameters.requireIngressRules
          not has_ingress_rules(input.review.object)
          msg := "NetworkPolicy must specify ingress rules"
        }

        has_default_deny(policy) {
          policy.spec.policyTypes[_] == "Ingress"
          count(policy.spec.ingress) == 0
        }

        has_ingress_rules(policy) {
          count(policy.spec.ingress) > 0
        } 
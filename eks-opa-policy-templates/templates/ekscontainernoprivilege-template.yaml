apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: ekscontainernoprivilege
  annotations:
    description: "Controls privilege escalation in containers (CIS EKS 4.5.2, 4.2.5)"
    version: "1.0.0"
spec:
  crd:
    spec:
      names:
        kind: EksContainerNoPrivilege
      validation:
        openAPIV3Schema:
          properties:
            excludedContainers:
              type: array
              items:
                type: string
            excludedImages:
              type: array
              items:
                type: string
            excludedNamespaces:
              type: array
              items:
                type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package ekscontainernoprivilege
        
        is_excluded(container) {
            exclude_images := object.get(object.get(input, "parameters", {}), "excludedImages", [])
            img := container.image
            some exclusion
            exclusion = exclude_images[_]
            _matches_exclusion(img, exclusion)
        }

        _matches_exclusion(img, exclusion) {
            not endswith(exclusion, "*")
            exclusion == img
        }

        _matches_exclusion(img, exclusion) {
            endswith(exclusion, "*")
            prefix := trim_suffix(exclusion, "*")
            startswith(img, prefix)
        }

        violation[{"msg": msg, "details": {}}] {
            not input.review.object.spec.nodeSelector["kubernetes.io/os"] == "windows"
            c := input_containers[_]
            not input_container_excluded(c.name)
            not is_excluded(c)
            c.securityContext.privileged
            msg := sprintf("Privileged container is not allowed: %v, securityContext: %v", [c.name, c.securityContext])
        }

        input_containers[c] {
            c := input.review.object.spec.containers[_]
        }

        input_containers[c] {
            c := input.review.object.spec.initContainers[_]
        }

        input_containers[c] {
          c := input.review.object.spec.ephemeralContainers[_]
        }

        input_container_excluded(field) {
            field == input.parameters.excludedContainers[_]
        }

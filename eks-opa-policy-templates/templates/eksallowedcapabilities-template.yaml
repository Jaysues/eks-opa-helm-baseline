apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: eksallowedcapabilities
  annotations:
    description: "Controls allowed container capabilities and required capability drops (CIS EKS 4.5.2)"
    version: "1.0.0"
spec:
  crd:
    spec:
      names:
        kind: EksAllowedCapabilities
      validation:
        openAPIV3Schema:
          properties:
            allowedCapabilities:
              type: array
              items:
                type: string
            requiredDropCapabilities:
              type: array
              items:
                type: string
            excludedContainers:
              type: array
              items:
                type: string
            excludedImages:
              type: array
              items:
                type: string
            excludedNamespaces:
              type: array
              items:
                type: string
            labelSelector:
              type: object
              properties:
                matchLabels:
                  type: object
                  additionalProperties:
                    type: string
                matchExpressions:
                  type: array
                  items:
                    type: object
                    properties:
                      key:
                        type: string
                      operator:
                        type: string
                        enum: ["In", "NotIn", "Exists", "DoesNotExist"]
                      values:
                        type: array
                        items:
                          type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package eksallowedcapabilities

        violation[{"msg": msg}] {
          container := input_containers[_]
          not input_container_excluded(container.name)
          not is_image_excluded(container.image)
          has_disallowed_capabilities(container)
          msg := sprintf("Container <%v> has disallowed capabilities. Allowed capabilities are %v", [container.name, input.parameters.allowedCapabilities])
        }

        violation[{"msg": msg}] {
          container := input_containers[_]
          not input_container_excluded(container.name)
          not is_image_excluded(container.image)
          missing_drop_capabilities(container)
          msg := sprintf("Container <%v> is missing required drop capabilities. Required: %v", [container.name, input.parameters.requiredDropCapabilities])
        }

        has_disallowed_capabilities(container) {
          allowed := {c | c := lower(input.parameters.allowedCapabilities[_])}
          capabilities := {c | c := lower(container.securityContext.capabilities.add[_])}
          count(capabilities - allowed) > 0
        }

        missing_drop_capabilities(container) {
          must_drop := {c | c := lower(input.parameters.requiredDropCapabilities[_])}
          dropped := {c | c := lower(container.securityContext.capabilities.drop[_])}
          count(must_drop - dropped) > 0
        }

        input_containers[c] {
          c := input.review.object.spec.containers[_]
        }

        input_container_excluded(name) {
          name == input.parameters.excludedContainers[_]
        }

        is_image_excluded(image) {
          exclusion := input.parameters.excludedImages[_]
          startswith(image, trim_suffix(exclusion, "*"))
        }

apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: eksminimisewildcard
  annotations:
    description: "Prevents use of wildcards in RBAC roles (CIS EKS 4.1.3)"
    version: "1.0.0"
spec:
  crd:
    spec:
      names:
        kind: EksMinimiseWildcard
      validation:
        openAPIV3Schema:
          properties:
            whitelistedRoles:
              type: array
              items:
                type: string
            excludedNamespaces:
              type: array
              items:
                type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package eksminimisewildcard

        violation[{"msg": msg}] {
          kind := input.review.kind.kind
          name := input.review.object.metadata.name
          not is_default_cluster_role
          not is_gatekeeper_cluster_role
          not is_eks_managed_cluster_role

          using_wildcard(input.review.object.rules)
          msg := sprintf("%s %s should not use wildcard '*'", [kind, name])
        }

        is_default_cluster_role {
          input.review.kind.kind == "ClusterRole"
          metadata := input.review.object.metadata
          is_default_cluster_role_name(metadata.name)
          metadata.labels["kubernetes.io/bootstrapping"] == "rbac-defaults"
        }

        default DEFAULT_CLUSTER_ROLE_NAMES = ["cluster-admin", "admin", "edit", "view"]
        is_default_cluster_role_name(name) {
          name == DEFAULT_CLUSTER_ROLE_NAMES[_]
        }

        is_default_cluster_role_name(name) {
          startswith(name, "system:")
        }

        is_gatekeeper_cluster_role {
          input.review.kind.kind == "ClusterRole"
          input.review.object.metadata.name == "gatekeeper-manager-role"
        }

        default EKS_MANAGED_CLUSTER_ROLE_NAMES = ["aws-node", "eks:podsecuritypolicy:authenticated", "eks:fargate-scheduler", "aws-load-balancer-controller", "ebs-csi-controller-sa", "eks-vpc-cni", "cert-manager", "cluster-autoscaler", "external-dns", "aws-cloudwatch-metrics", "aws-for-fluent-bit"]
        is_eks_managed_cluster_role { 
          input.review.kind.kind == "ClusterRole"
          input.review.object.metadata.name == EKS_MANAGED_CLUSTER_ROLE_NAMES[_]
        }

        using_wildcard(rules) = res {
          match := {1 | exist_wildcard(rules[j])}
          res := count(match) > 0
        }
        WILDCARD = "*"
        exist_wildcard(rule) {
          WILDCARD == rule.apiGroups[_]
        }
        exist_wildcard(rule) {
          WILDCARD == rule.resources[_]
        }
        exist_wildcard(rule) {
          WILDCARD == rule.verbs[_]
        }
        exist_wildcard(rule) {
          WILDCARD == rule.nonResourceURLs[_]
        }
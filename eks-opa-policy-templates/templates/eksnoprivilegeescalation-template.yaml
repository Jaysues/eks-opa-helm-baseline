apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: eksnoprivilegeescalation
  annotations:
    description: "Prevents privilege escalation in containers (CIS EKS 4.2.1)"
    version: "1.0.0"
spec:
  crd:
    spec:
      names:
        kind: EksNoPrivilegeEscalation
      validation:
        openAPIV3Schema:
          properties:
            excludedContainers:
              type: array
              items:
                type: string
            excludedImages:
              type: array
              items:
                type: string
            excludedNamespaces:
              type: array
              items:
                type: string
            labelSelector:
              type: object
              properties:
                matchLabels:
                  type: object
                  additionalProperties:
                    type: string
                matchExpressions:
                  type: array
                  items:
                    type: object
                    properties:
                      key:
                        type: string
                      operator:
                        type: string
                        enum: ["In", "NotIn", "Exists", "DoesNotExist"]
                      values:
                        type: array
                        items:
                          type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package eksnoprivilegeescalation

        is_excluded(container) {
            exclude_images := object.get(object.get(input, "parameters", {}), "excludedImages", [])
            img := container.image
            some exclusion
            exclusion = exclude_images[_]
            _matches_exclusion(img, exclusion)
        }

        _matches_exclusion(img, exclusion) {
            not endswith(exclusion, "*")
            exclusion == img
        }

        _matches_exclusion(img, exclusion) {
            endswith(exclusion, "*")
            prefix := trim_suffix(exclusion, "*")
            startswith(img, prefix)
        }

        violation[{"msg": msg, "details": {}}] {
            c := input_containers[_]
            not input_container_excluded(c.name)
            not is_excluded(c)
            input_allow_privilege_escalation(c)
            msg := sprintf("Privilege escalation container is not allowed: %v", [c.name])
        }

        input_allow_privilege_escalation(c) {
            c.securityContext.allowPrivilegeEscalation == true
        }

        input_allow_privilege_escalation(c) {
            not c.securityContext.allowPrivilegeEscalation == false
            c.securityContext.runAsUser != 0
        }
        
        input_allow_privilege_escalation(c) {
            not c.securityContext.allowPrivilegeEscalation == false
            not c.securityContext.runAsUser
            input.review.object.spec.securityContext.runAsUser != 0
        }

        input_containers[c] {
            c := input.review.object.spec.containers[_]
        }

        input_containers[c] {
            c := input.review.object.spec.initContainers[_]
        }

        input_containers[c] {
          c := input.review.object.spec.ephemeralContainers[_]
        }

        input_container_excluded(field) {
            field == input.parameters.excludedContainers[_]
        }


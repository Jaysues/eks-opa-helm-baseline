apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: eksmountedsecrets
  annotations:
    description: "Prevents using secrets as environment variables (CIS EKS 4.4.1)"
    version: "1.0.0"
spec:
  crd:
    spec:
      names:
        kind: EksMountedSecrets
      validation:
        openAPIV3Schema:
          properties:
            allowedSecrets:
              type: array
              items:
                type: string
            excludedNamespaces:
              type: array
              items:
                type: string
            excludedImages:
              type: array
              items:
                type: string
            labelSelector:
              type: object
              properties:
                matchLabels:
                  type: object
                  additionalProperties:
                    type: string
                matchExpressions:
                  type: array
                  items:
                    type: object
                    properties:
                      key:
                        type: string
                      operator:
                        type: string
                        enum: ["In", "NotIn", "Exists", "DoesNotExist"]
                      values:
                        type: array
                        items:
                          type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package eksmountedsecrets

        violation[{"msg": msg, "details": {}}] {
          not excluded_namespace
          container := input_containers[_]
          not is_excluded(container)
          
          env := container.env[_]
          secret_ref := env.valueFrom.secretKeyRef
          not allowed_secret(secret_ref.name)

          msg := sprintf("Container '%v' in pod '%v' uses non-exempted secret '%v' as environment variable. Use secret volumes instead.", [container.name, input.review.object.metadata.name, secret_ref.name])
        }

        violation[{"msg": msg, "details": {}}] {
          not excluded_namespace
          container := input_containers[_]
          not is_excluded(container)
          
          envFrom := container.envFrom[_]
          secret_ref := envFrom.secretRef
          not allowed_secret(secret_ref.name)

          msg := sprintf("Container '%v' in pod '%v' uses non-exempted secret '%v' as environment variable. Use secret volumes instead.", [container.name, input.review.object.metadata.name, secret_ref.name])
        }

        allowed_secret(name) {
          name == input.parameters.allowedSecrets[_]
        }

        input_containers[c] {
          c := input.review.object.spec.containers[_]
        }

        input_containers[c] {
          c := input.review.object.spec.initContainers[_]
        }

        input_containers[c] {
          c := input.review.object.spec.ephemeralContainers[_]
        }

        excluded_namespace {
          input.review.object.metadata.namespace == input.parameters.excludedNamespaces[_]
        }

        is_excluded(container) {
          exclude_images := object.get(object.get(input, "parameters", {}), "excludedImages", [])
          img := container.image
          some exclusion
          exclusion = exclude_images[_]
          _matches_exclusion(img, exclusion)
        }

        _matches_exclusion(img, exclusion) {
          not endswith(exclusion, "*")
          exclusion == img
        }

        _matches_exclusion(img, exclusion) {
          endswith(exclusion, "*")
          prefix := trim_suffix(exclusion, "*")
          startswith(img, prefix)
        }
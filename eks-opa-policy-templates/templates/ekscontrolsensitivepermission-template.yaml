apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: ekscontrolsensitivepermission
  annotations:
    description: "Controls access to sensitive Kubernetes resources"
spec:
  crd:
    spec:
      names:
        kind: EksControlSensitivePermission
      validation:
        openAPIV3Schema:
          type: object
          properties:
            sensitiveResources:
              type: array
              items:
                type: string
            defaultClusterRoles:
              type: array
              items:
                type: string
            eksClusterRoles:
              type: array
              items:
                type: string
            gatekeeperRoles:
              type: array
              items:
                type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package ekscontrolsensitivepermission

        violation[{"msg": msg, "details": details}] {
          not is_default_cluster_role
          not is_gatekeeper_cluster_role
          not is_eks_managed_cluster_role
          
          resource := input.review.object.rules[_].resources[_]
          input.parameters.sensitiveResources[_] == resource
          
          msg := sprintf("Role contains sensitive resource access: %v", [resource])
          details := {
            "role_name": input.review.object.metadata.name,
            "namespace": input.review.object.metadata.namespace,
            "sensitive_resource": resource,
            "cis_benchmark": "4.1.8",
            "finding_type": "CIS_BENCHMARK_VIOLATION"
          }
        }
        
        is_default_cluster_role {
          input.review.kind.kind == "ClusterRole"
          metadata := input.review.object.metadata
          is_default_cluster_role_name(metadata.name)
          metadata.labels["kubernetes.io/bootstrapping"] == "rbac-defaults"
        }

        is_default_cluster_role_name(name) {
          name == input.parameters.defaultClusterRoles[_]
        }

        is_default_cluster_role_name(name) {
          startswith(name, "system:")
        }

        is_gatekeeper_cluster_role {
          input.review.kind.kind == "ClusterRole"
          input.review.object.metadata.name == input.parameters.gatekeeperRoles[_]
        }

        is_eks_managed_cluster_role { 
          input.review.kind.kind == "ClusterRole"
          input.review.object.metadata.name == input.parameters.eksClusterRoles[_]
        }
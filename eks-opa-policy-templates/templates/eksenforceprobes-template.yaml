apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: eksenforceprobes
  annotations:
    description: "Enforces configuration of container probes in EKS clusters (CIS EKS 4.5.2)"
    version: "1.0.0"
spec:
  crd:
    spec:
      names:
        kind: EksEnforceProbes
      validation:
        openAPIV3Schema:
          properties:
            enforceProbes:
              type: array
              items:
                type: string
            excludedContainers:
              type: array
              items:
                type: string
            excludedImages:
              type: array
              items:
                type: string
            excludedNamespaces:
              type: array
              items:
                type: string
            labelSelector:
              type: object
              properties:
                matchLabels:
                  type: object
                  additionalProperties:
                    type: string
                matchExpressions:
                  type: array
                  items:
                    type: object
                    properties:
                      key:
                        type: string
                      operator:
                        type: string
                        enum: ["In", "NotIn", "Exists", "DoesNotExist"]
                      values:
                        type: array
                        items:
                          type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package eksenforceprobes

        is_excluded(container) {
            exclude_images := object.get(object.get(input, "parameters", {}), "excludedImages", [])
            img := container.image
            some exclusion
            exclusion = exclude_images[_]
            _matches_exclusion(img, exclusion)
        }

        _matches_exclusion(img, exclusion) {
            not endswith(exclusion, "*")
            exclusion == img
        }

        _matches_exclusion(img, exclusion) {
            endswith(exclusion, "*")
            prefix := trim_suffix(exclusion, "*")
            startswith(img, prefix)
        }
        
        probe_type_set = probe_types {
          probe_types := {type | type := ["tcpSocket", "httpGet", "exec"][_]}
        }
        violation[{"msg": msg}] {
          container := input_containers[_]
          not input_container_excluded(container.name)
          not is_excluded(container)
          probe := input.parameters.enforceProbes[_]
          probe_is_missing(container, probe)
          msg := get_violation_message(container, input.review, probe)
        }
        probe_is_missing(ctr, probe) = true {
          not ctr[probe]
        }
        probe_is_missing(ctr, probe) = true {
          probe_field_empty(ctr, probe)
        }
        probe_field_empty(ctr, probe) = true {
          probe_fields := {field | ctr[probe][field]}
          diff_fields := probe_type_set - probe_fields
          count(diff_fields) == count(probe_type_set)
        }
        get_violation_message(container, review, probe) = msg {
          msg := sprintf("Container <%v> in your Pod <%v> has no <%v>. Required probes: %v", [container.name, review.object.metadata.name, probe, input.parameters.enforceProbes])
        }

        input_containers[c] {
          c := input.review.object.spec.containers[_]
        }
        input_container_excluded(field) {
          field == input.parameters.excludedContainers[_]
        }

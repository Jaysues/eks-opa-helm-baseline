apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: eksresourcelimits
  annotations:
    description: "Enforces resource limits for containers"
spec:
  crd:
    spec:
      names:
        kind: EksResourceLimits
      validation:
        openAPIV3Schema:
          properties:
            excludedNamespaces:
              type: array
              items:
                type: string
            excludedImages:
              type: array
              items:
                type: string
            labelSelector:
              type: object
              properties:
                matchLabels:
                  type: object
                  additionalProperties:
                    type: string
            defaultCpuLimit:
              type: string
            defaultMemoryLimit:
              type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package eksresourcelimits

        is_excluded(container) {
            exclude_images := object.get(object.get(input, "parameters", {}), "excludedImages", [])
            img := container.image
            some exclusion
            exclusion = exclude_images[_]
            _matches_exclusion(img, exclusion)
        }

        _matches_exclusion(img, exclusion) {
            not endswith(exclusion, "*")
            exclusion == img
        }

        _matches_exclusion(img, exclusion) {
            endswith(exclusion, "*")
            prefix := trim_suffix(exclusion, "*")
            startswith(img, prefix)
        }

        violation[{"msg": msg}] {
          not excluded_namespace
          container := input_containers[_]
          not is_excluded(container)
          not has_limits(container)
          
          msg := sprintf("Container '%v' in pod '%v' must specify resource limits", [
            container.name,
            input.review.object.metadata.name
          ])
        }

        has_limits(container) {
          container.resources.limits.cpu
          container.resources.limits.memory
        }

        input_containers[c] {
          c := input.review.object.spec.containers[_]
        }

        input_containers[c] {
          c := input.review.object.spec.initContainers[_]
        }

        excluded_namespace {
          input.review.object.metadata.namespace == input.parameters.excludedNamespaces[_]
        }

apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: eksforbiddensysctl
  annotations:
    description: "Prevents pods from using unsafe sysctls (CIS EKS 4.5.2)"
    version: "1.0.0"
spec:
  crd:
    spec:
      names:
        kind: EksForbiddenSysctl
      validation:
        openAPIV3Schema:
          properties:
            forbiddenSysctls:
              type: array
              items:
                type: string
            excludedNamespaces:
              type: array
              items:
                type: string
            excludedImages:
              type: array
              items:
                type: string
            labelSelector:
              type: object
              properties:
                matchLabels:
                  type: object
                  additionalProperties:
                    type: string
                matchExpressions:
                  type: array
                  items:
                    type: object
                    properties:
                      key:
                        type: string
                      operator:
                        type: string
                        enum: ["In", "NotIn", "Exists", "DoesNotExist"]
                      values:
                        type: array
                        items:
                          type: string
            allowedSysctls:
              type: array
              items:
                type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package eksforbiddensysctl

        violation[{"msg": msg, "details": {}}] {
          not excluded_namespace
          not is_excluded(input.review.object.spec)
          
          sysctl := input.review.object.spec.securityContext.sysctls[_]
          forbidden_sysctl(sysctl.name)
          not allowed_sysctl(sysctl.name)

          msg := sprintf("Pod '%v' has forbidden sysctl '%v' configured. Sysctls are restricted by default.", [input.review.object.metadata.name, sysctl.name])
        }

        forbidden_sysctl(name) {
          forbidden := input.parameters.forbiddenSysctls[_]
          startswith(name, forbidden)
        }

        allowed_sysctl(name) {
          name == input.parameters.allowedSysctls[_]
        }

        excluded_namespace {
          input.review.object.metadata.namespace == input.parameters.excludedNamespaces[_]
        }

        is_excluded(spec) {
          exclude_images := object.get(object.get(input, "parameters", {}), "excludedImages", [])
          img := spec.containers[_].image
          some exclusion
          exclusion = exclude_images[_]
          _matches_exclusion(img, exclusion)
        }

        _matches_exclusion(img, exclusion) {
          not endswith(exclusion, "*")
          exclusion == img
        }

        _matches_exclusion(img, exclusion) {
          endswith(exclusion, "*")
          prefix := trim_suffix(exclusion, "*")
          startswith(img, prefix)
        }